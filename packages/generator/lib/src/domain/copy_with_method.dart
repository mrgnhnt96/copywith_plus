// ignore_for_file: comment_references

import 'package:analyzer/dart/element/element.dart';
import 'package:ice/src/domain/domain.dart';

/// {@template copy_with_method}
/// The copyWith method for a [Field]
/// {@endtemplate}
class CopyWithMethod {
  /// {@template copy_with_method}
  const CopyWithMethod({
    required this.returnType,
    required this.parameters,
  });

  /// retrieves the copyWith method from the [MethodElement]
  factory CopyWithMethod.fromElement(MethodElement element) {
    final parameters = Param.fromElements(element.parameters);

    return CopyWithMethod(
      returnType: element.returnType.getDisplayString(withNullability: true),
      parameters: parameters,
    );
  }

  /// looks for the copyWith method in the field's methods
  static CopyWithMethod? fromElements(List<MethodElement> elements) {
    for (final element in elements) {
      if (element.name != 'copyWith') {
        continue;
      }

      final typeName =
          element.returnType.getDisplayString(withNullability: true);

      if (typeName.startsWith('_')) {
        break;
      }

      return CopyWithMethod.fromElement(element);
    }
  }

  /// the name of the method
  String get name => 'copyWith';

  /// the return type of the method
  final String returnType;

  /// the params for the method
  final List<Param> parameters;

  /// whether copyWith is generated by ice
  bool get isIceGenerated =>
      returnType.startsWith(r'$') && returnType.endsWith('IceCopyWith');
}
