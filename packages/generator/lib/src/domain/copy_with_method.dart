// ignore_for_file: comment_references

import 'package:analyzer/dart/element/element.dart';
import 'package:analyzer/dart/element/type.dart';
import 'package:ice/src/domain/domain.dart';

/// {@template copy_with_method}
/// The copyWith method for a [Field]
/// {@endtemplate}
class CopyWithMethod {
  /// {@template copy_with_method}
  const CopyWithMethod({
    required this.returnType,
    required this.parameters,
  }) : isIceGenerated = false;

  /// {@template copy_with_method}
  const CopyWithMethod.ice({
    required this.returnType,
  })  : parameters = const [],
        isIceGenerated = true;

  /// retrieves the copyWith method from the [MethodElement]
  factory CopyWithMethod.fromMethod(MethodElement element) {
    final parameters = Param.fromElements(element.parameters);
    final returnType =
        element.returnType.getDisplayString(withNullability: true);

    return CopyWithMethod(
      returnType: returnType,
      parameters: parameters,
    );
  }

  /// retrieves the copyWith method from the [MethodElement]
  factory CopyWithMethod.fromField(FieldElement element) {
    final returnType =
        element.declaration.type.getDisplayString(withNullability: true);

    return CopyWithMethod.ice(returnType: returnType);
  }

  /// looks for the copyWith method in the field's methods
  static CopyWithMethod? fromMethods(List<MethodElement> elements) {
    for (final element in elements) {
      if (element.name != 'copyWith') {
        continue;
      }

      return CopyWithMethod.fromMethod(element);
    }
  }

  /// looks for the copyWith method in the field's methods
  static CopyWithMethod? fromFields(List<FieldElement> elements) {
    for (final element in elements) {
      if (element.name != 'copyWith') {
        continue;
      }

      return CopyWithMethod.fromField(element);
    }
  }

  /// checks all methods and superclasses methods for the copyWith method
  static CopyWithMethod? recursive(Element element) {
    dynamic type;

    if (element is FieldElement) {
      type = element.type;
    } else if (element is ParameterElement) {
      type = element.type;
    } else {
      return null;
    }

    if (type is! InterfaceType?) {
      return null;
    }

    bool isDartCoreType(InterfaceType type) {
      if (type.isDartCoreBool) return true;
      if (type.isDartCoreDouble) return true;
      if (type.isDartCoreInt) return true;
      if (type.isDartCoreNull) return true;
      if (type.isDartCoreNum) return true;
      if (type.isDartCoreString) return true;
      if (type.isDartCoreObject) return true;
      if (type.isDartCoreIterable) return true;
      if (type.isDartCoreList) return true;
      if (type.isDartCoreMap) return true;
      if (type.isDartCoreSet) return true;

      return false;
    }

    CopyWithMethod? check(InterfaceType? supe) {
      if (supe == null || isDartCoreType(supe)) {
        return null;
      }

      final methodsIsEmpty = supe.methods.isEmpty;
      final fieldsIsEmpty = supe.element.fields.isEmpty;

      if (methodsIsEmpty && fieldsIsEmpty) {
        if (supe.superclass == null) {
          return null;
        }

        return check(supe.superclass);
      }

      return CopyWithMethod.fromFields(supe.element.fields) ??
          CopyWithMethod.fromMethods(supe.methods) ??
          check(supe.superclass);
    }

    return check(type);
  }

  /// the name of the method
  String get name => 'copyWith';

  /// the return type of the method
  final String returnType;

  /// the params for the method
  final List<Param> parameters;

  /// whether the copyWith method is generated by Ice
  final bool isIceGenerated;
}
