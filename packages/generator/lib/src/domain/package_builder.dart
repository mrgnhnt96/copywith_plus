import 'package:build/build.dart';
import 'package:meta/meta.dart';
import 'package:source_gen/source_gen.dart';

/// gets the entry point for the builder
typedef TestBuilder = Builder Function(BuilderOptions options);

/// {@template package_builder}
/// The builder for generation
/// {@endtemplate}
abstract class PackageBuilder {
  /// {@macro package_builder}
  PackageBuilder({
    required this.name,
    required this.extension,
  });

  /// the name of the IceGenerator
  final String name;

  /// the extension that will be generated by the builder
  final String extension;

  /// gets the entry point for the builder
  ///
  /// ! must be annotated with `@visibleForTesting`
  @visibleForTesting
  TestBuilder get entryPoint;

  /// retrieves the builder
  Builder get builder {
    return PartBuilder(
      generators,
      extension,
      header: header,
    );
  }

  /// the list of generators for the builder
  List<Generator> get generators;

  /// the header for the generated file
  String get header => '''
$ignoreCoverage
$generatedByHand
$ignoreForFile
''';

  /// the list of ignore_for_file
  List<String> get ignores => <String>[];

  /// `// GENERATED CODE - DO NOT MODIFY BY HAND`
  final String generatedByHand = '// GENERATED CODE - DO NOT MODIFY BY HAND';

  /// `// coverage:ignore-file`
  final String ignoreCoverage = '// coverage:ignore-file';

  /// `// ignore_for_file: ${ignores.join(',')}`
  String get ignoreForFile => '// ignore_for_file: ${ignores.join(',')}'.trim();
}
